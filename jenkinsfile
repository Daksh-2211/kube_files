pipeline {
    agent any

    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DEPENDENCY_CHECK_DB = '/var/lib/jenkins/odc-db'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Vansh-Umraliya/swiggy.git'
            }
        }

        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Swiggy \
                        -Dsonar.projectKey=Swiggy \
                        -Dsonar.sources=. \
                        -Dsonar.language=js \
                        -Dsonar.sourceEncoding=UTF-8
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: "--scan . --data $DEPENDENCY_CHECK_DB", odcInstallation: 'DP-Check'
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                sh "trivy fs . > trivyfs.txt || true"
            }
        }

        stage("Docker Build & Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-creds', toolName: 'docker') {
                        sh '''
                        echo "ðŸ”„ Stopping and removing old containers..."
                        docker stop swiggy || true
                        docker rm swiggy || true

                        echo "ðŸ§¹ Cleaning up old Docker images..."
                        docker images -q dakshbhavsar/swiggy:latest | xargs -r docker rmi -f || true

                        echo "ðŸš€ Building the Docker image..."
                        docker build --no-cache -t swiggy .

                        echo "ðŸ”„ Tagging the image..."
                        docker tag swiggy dakshbhavsar/swiggy:latest

                        echo "ðŸ“¤ Pushing the image to Docker Hub..."
                        docker push dakshbhavsar/swiggy:latest

                        echo "âœ… Docker image pushed successfully!"
                        '''
                    }
                }
            }
        }

        stage("Trivy Image Scan") {
            steps {
                sh "trivy image dakshbhavsar/swiggy:latest > trivy.txt || true"
            }
        }

        stage('Deploy to Container') {
            steps {
                sh '''
                echo "ðŸš€ Deploying container..."
                docker run -d --name swiggy -p 3000:3000 dakshbhavsar/swiggy:latest
                '''
            }
        }
    }
}
