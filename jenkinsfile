pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DEPENDENCY_CHECK_DB = '/var/lib/jenkins/odc-db'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Vansh-Umraliya/swiggy.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Swiggy \
                    -Dsonar.projectKey=Swiggy
                    '''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: "--scan ./package.json --disableYarnAudit --disableNodeAudit --data $DEPENDENCY_CHECK_DB --disableRetireJS --disableNodeJS --disableCentral --disableOSSIndex", odcInstallation: 'DP-Check'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
stage("Docker Build & Push") {
    steps {
        script {
            withDockerRegistry(credentialsId: 'docker-creds', toolName: 'docker') {   
                sh '''
              \
                echo "ðŸ”„ Cleaning up old Docker images..."
                docker images -q dakshbhavsar/swiggy:latest | xargs -r docker rmi -f
                
                echo "ðŸš€ Building the Docker image..."
                docker build --no-cache -t swiggy .

                echo "ðŸ”„ Tagging the image..."
                docker tag swiggy dakshbhavsar/swiggy:latest

                echo "ðŸ“¤ Pushing the image to Docker Hub..."
                docker push dakshbhavsar/swiggy:latest

                echo "âœ… Docker image pushed successfully!"
                '''
            }
        }
    }
}

        stage("TRIVY Image Scan") {
            steps {
                sh "trivy image dakshbhavsar/swiggy:latest > trivy.txt"
            }
        }
        stage('Deploy to Container') {
            steps {
                sh 'docker stop swiggy'
                sh 'docker rm swiggy'
                sh 'docker run -d --name swiggy -p 3000:3000 dakshbhavsar/swiggy:latest'
            }
        }
    }
}
